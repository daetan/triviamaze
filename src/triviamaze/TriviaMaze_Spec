Purpose

The purpose of this project is to allow you to work on the following skills:

    building a project from scratch
    coordinating code with team members
        versioning with git and GitHub
        project planning with Pivotal Tracker
    building a Software Requirements Specifications (SRS) document
    unit testing
    working with a database (SQLite)
    logging hours via Toggl
    presentation skills
        end of iteration presentation (maybe)
        project demonstration (definitely)
    code style
        coding standards
        refactoring
        OO principles and design patterns
        code review from instructor

Project Details

You must create a maze that user must navigate through from entrance to exit.  The maze is composed of rooms.  Each room has 1 or more doors (the design is up to you).  In order for the user to pass through a door, they must correctly answer a question.  The type of questions asked are up to you, but you should have multiple choice, true/false, and short answer (one or two words/ one or two numbers).  The questions (and their corresponding answers) should be stored in a SQLite database.  The format of the database is up to you, but you might want to categorize your questions into the different formats you must display them in.

If a the user is unable to answer a question, that door is then locked permanently.  If the user is unable to make it from the entrance to the exit (due to locked doors), the game is lost.

You may display one room at a time, the entire maze, or the current room and the entire maze.

You are welcome to implement variations on this theme, but run them by your instructor first.  You might place items in the room that can help the user (magic key that gets you through one door, a hint (ala "Who Wants to be a Millionaire") that reduces the multiple choice options or gives you the first letter/digit of an answer that must be typed.

The maximum size of the maze is up to you, but should be at least four by four rooms.  You can randomly place the entrance and exit, or you can fix them at opposite ends of the maze.

The classes you create are up to you, but it seems you should have these: Maze, Room, Question_Answer (this could be an inheritance hierarchy), TriviaMaze (which contains the main method and runs the program). 

Your program should have the ability to save the current state.  You will want to do this using serialization.  Otherwise, you'll need to write info about where the user is, how many questions answered, which rooms have been processed, etc. to a text file.

Include an interface that contains the following items:

    A menu system that has the following menus/choices at the very least
        File (Save Game, Load Game, Exit)
        Help (About, Game Play Instructions, Cheats)
    Something that displays info about the current room.
    Something that allows user navigation through the maze.  Only options that are valid for a room should be active/displayed.
    A section that displays the current question.  This area should be updated dynamically based on the type of question (multiple choice, T/F, short answer, etc.)
    Note that interface can be console or GUI

Your program should read from a SQLite database file.  Extra credit consideration will be made for the following:

    creativity (adding additional features to enhance game play; intuitive look and feel, etc.)
    ease and realism of game play (is the game easy to follow and is it fun)
    incorporation of sounds and other multimedia items
    ? (see me if you have other ideas)

Project Deliverables

    A zip file with the following items
        Source file solution for your project (Eclipse or IntelliJ project folder is fine for this)
            Code should have thorough Javadoc comments
            There should be a robust set of unit tests
            Be sure required SQLite support files are included so program can be run without issue
        UML class diagram that represents your solution (.pdf format)
        Final version of SRS (.pdf format)
        List/capture of all user stories on Pivotal Tracker (those completed as well as those that are unfinished) (.pdf format)
        Log of commit history of git/GitHub for all team members (.pdf format)
        A project synopsis that contains the following (.pdf format)
            team member names
            breakdown of what each person worked on
            total hours contributed by each person on project (a Toggl report should be part of this)
            discussion of problems you had to overcome
            discussion of shortcomings your project has (if there aren't any state so)
            discussion of items you feel should be considered for extra credit on project
        Informal demo of project. Each team will introduce itself, give a description of its project theme and highlights, then do a demo. Demo day is Monday, March 14 at 8-10am. Demo should take around 10 minutes per team.
        NOTE: Extra credit is available for anything above and beyond the basic project requirements. Possible items include:
            sound
            video
            an installer program
            additional features
                home made images/assets
                animation
                ??
